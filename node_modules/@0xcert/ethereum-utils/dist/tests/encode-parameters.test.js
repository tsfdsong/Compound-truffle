"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const spec_1 = require("@hayspec/spec");
const abi_1 = require("../lib/abi");
const big_number_1 = require("../lib/big-number");
const spec = new spec_1.Spec();
spec.test('encode parameters', (ctx) => {
    const types = ['tuple(uint256, uint256[])'];
    const values = [[42, [45]]];
    const encoded = '0x' +
        '0000000000000000000000000000000000000000000000000000000000000020' +
        '000000000000000000000000000000000000000000000000000000000000002a' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '000000000000000000000000000000000000000000000000000000000000002d';
    ctx.is(abi_1.encodeParameters(types, values), encoded);
    function equals(actual, expected) {
        if (Array.isArray(actual)) {
            if (!Array.isArray(expected) || actual.length !== expected.length) {
                return false;
            }
            for (let i = 0; i < actual.length; i++) {
                if (!equals(actual[i], expected[i])) {
                    return false;
                }
            }
            return true;
        }
        if (typeof (actual) === 'number') {
            actual = big_number_1.bigNumberify(actual);
        }
        if (typeof (expected) === 'number') {
            expected = big_number_1.bigNumberify(expected);
        }
        if (actual.eq) {
            if (typeof (expected) === 'string' && expected.match(/^-?0x[0-9A-Fa-f]*$/)) {
                const neg = (expected.substring(0, 1) === '-');
                if (neg) {
                    expected = expected.substring(1);
                }
                expected = big_number_1.bigNumberify(expected);
                if (neg) {
                    expected = expected.mul(-1);
                }
            }
            if (!actual.eq(expected)) {
                return false;
            }
            return true;
        }
        return (actual === expected);
    }
    const result = abi_1.decodeParameters(types, encoded);
    ctx.is(equals(result, values), true);
});
exports.default = spec;
//# sourceMappingURL=encode-parameters.test.js.map